Algorithms to use:
    - Fleases, full version for loosley synchronized clocks (because we need to work in the crash-recovery model)
    - Some sort of synch algorithm for the CRDTS that should be executed directly after the lease has been aquired
    - Have a look at the current merge functionality, isn't it working correctly?
    - Broadcast, what type of broadcast is it?

Plan for fail-recovery:
    - Implement a simple version of the fail-recovery model
    - Create a agent only used as a fail-recovery agent (is it still distributed, not really, what happens if tha agent fails...)
        Maintain a heartbeat mechanism: Each agent periodically sends heartbeats to the failure detector actor.
        Monitor heartbeat timeouts: The failure detector actor monitors the time since the last heartbeat from each agent.
        Declare failure: If an agent doesn't send a heartbeat within a timeout threshold, the failure detector marks it as failed and notifies other agents.

TODO:
    [] Implement fail-recovery
        - Use heartbeats to detect if an agent has failed
    [] Check that the locking mechanism works by implementing a queue to handle the requests when the lock is already acquired
    [] Make sure deadlocks can't happen by implementing a timeout for the lock
    [] Instead of creating random characters for the keys on execution, create a file with a list of keys and values and read directly from there instead
    [] Write a testcase to examine the difference when running the skeleton algorithm versus our new algorithm (e.g. run the execution non-stop for 5 seconds and record the CRDTs afterwards)

TODO UPDATED:
    [] Fail recovery, broadcast delta message when receiving a heartbeat from "dead" actor.
    [] Fix the queue for operations to be executed once we have the lock.
    [] Integration test, start 8 actors, each actor increments a counter 1.000.000 times.
    [] Latency test, 3 cases, see email from Jonas.
    [] Throughput, linked to integration test.
